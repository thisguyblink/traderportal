import type { CurveName, DataRecord, BaseMarkProps, ConstantAccessor, ChannelAccessor, MarkerOptions } from '../types.js';
export type BaseLineMarkProps = {
    data: DataRecord[];
    z?: ChannelAccessor;
    stroke?: ChannelAccessor;
    outlineStroke?: ConstantAccessor<string>;
    outlineStrokeWidth?: ConstantAccessor<number>;
    dx?: ConstantAccessor<number>;
    dy?: ConstantAccessor<number>;
    curve?: CurveName | CurveFactory;
    tension?: number;
    sort?: ConstantAccessor<RawValue> | {
        channel: 'stroke' | 'fill';
    };
    text?: ConstantAccessor<string>;
    textFill?: ConstantAccessor<string>;
    textStroke?: ConstantAccessor<string>;
    textStartOffset?: ConstantAccessor<string>;
    textStrokeWidth?: ConstantAccessor<number>;
    lineClass?: ConstantAccessor<string>;
} & MarkerOptions;
import { type CurveFactory } from 'd3-shape';
import type { RawValue } from '../types.js';
type LineMarkProps = BaseMarkProps & {
    x?: ChannelAccessor;
    y?: ChannelAccessor;
} & BaseLineMarkProps;
/** Line mark, useful for line charts */
declare const Line: import("svelte").Component<LineMarkProps, {}, "">;
type Line = ReturnType<typeof Line>;
export default Line;
