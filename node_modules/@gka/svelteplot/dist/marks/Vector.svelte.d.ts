import type { DataRecord, BaseMarkProps, ConstantAccessor, ChannelAccessor } from '../types.js';
type D3Path = ReturnType<typeof import('d3-path').path>;
export type ShapeRenderer = {
    draw(context: D3Path, l: number, r: number): void;
};
export type VectorMarkProps = BaseMarkProps & {
    data: DataRecord[];
    x: ChannelAccessor;
    y: ChannelAccessor;
    r?: number;
    length?: ChannelAccessor;
    rotate?: ChannelAccessor;
    fill?: ChannelAccessor;
    stroke?: ChannelAccessor;
    /**
     * Controls where the vector is anchored in relation to the x, y position.
     * If set to 'start', the arrow will start at the x, y position. If set to
     * 'middle', the arrow will be centered at the x, y position. If set to
     * 'end', the arrow will end at the x, y position.
     */
    anchor: 'start' | 'middle' | 'end';
    shape?: 'arrow' | 'spike' | 'arrow-filled' | ShapeRenderer;
    children?: Snippet;
    dx?: ConstantAccessor<number>;
    dy?: ConstantAccessor<number>;
    canvas?: boolean;
};
import { type Snippet } from 'svelte';
declare const Vector: import("svelte").Component<VectorMarkProps, {}, "">;
type Vector = ReturnType<typeof Vector>;
export default Vector;
