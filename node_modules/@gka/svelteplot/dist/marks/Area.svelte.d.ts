export type AreaMarkProps = {
    z?: ChannelAccessor;
    fill?: ChannelAccessor;
    stroke?: ChannelAccessor;
    dx?: ConstantAccessor<number>;
    dy?: ConstantAccessor<number>;
    curve?: CurveName | CurveFactory;
    tension?: number;
    sort?: ConstantAccessor<RawValue> | {
        channel: 'stroke' | 'fill';
    };
    stack?: Partial<StackOptions>;
};
import { type CurveFactory } from 'd3-shape';
import type { CurveName, DataRecord, BaseMarkProps, ConstantAccessor, ChannelAccessor } from '../types.js';
import type { RawValue } from '../types.js';
import type { StackOptions } from '../transforms/stack.js';
type AreaProps = BaseMarkProps & {
    data: DataRecord[];
    /**
     * Lorem ipsum
     */
    x1?: ChannelAccessor;
    x2?: ChannelAccessor;
    y1?: ChannelAccessor;
    y2?: ChannelAccessor;
} & AreaMarkProps;
declare const Area: import("svelte").Component<AreaProps, {}, "">;
type Area = ReturnType<typeof Area>;
export default Area;
