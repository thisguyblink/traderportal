import { type Snippet } from 'svelte';
import type { ScaledChannelName, MarkType, DataRecord, ChannelName, GenericMarkOptions, ChannelAccessor, BaseMarkProps, ScaleName, RawValue, ScaledDataRecord, ScaleType } from './types.js';
import { getUsedScales } from './helpers/scales.js';
type MarkProps = {
    data?: DataRecord[];
    automatic?: boolean;
    type: MarkType;
    channels?: ScaledChannelName[];
    required?: ScaledChannelName[];
    requiredScales?: Partial<Record<ScaleName, ScaleType[]>>;
    children?: Snippet<[
        {
            mark: Mark<GenericMarkOptions>;
            usedScales: ReturnType<typeof getUsedScales>;
            scaledData: ScaledDataRecord[];
        }
    ]>;
    defaults?: Partial<Record<ScaledChannelName, RawValue>>;
} & Partial<Record<ChannelName, ChannelAccessor>> & Partial<BaseMarkProps>;
declare const Mark: import("svelte").Component<MarkProps, {}, "">;
type Mark = ReturnType<typeof Mark>;
export default Mark;
