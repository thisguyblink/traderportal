import type { ChannelName, DataRecord, TransformArg } from '../types.js';
type AtLeastOne<T, U = {
    [K in keyof T]: Pick<T, K>;
}> = Partial<T> & U[keyof U];
type SelectOptions = 'first' | 'last' | AtLeastOne<{
    [k in ChannelName]: 'min' | 'max';
}>;
export declare function select({ data, ...channels }: TransformArg<DataRecord>, options: SelectOptions): {
    data: DataRecord[];
};
/**
 * Keeps only the first item of each group
 */
export declare function selectFirst(args: TransformArg<DataRecord>): {
    data: DataRecord[];
};
/**
 * Keeps only the last item of each group
 */
export declare function selectLast(args: TransformArg<DataRecord>): {
    data: DataRecord[];
};
export declare function selectMinX(args: TransformArg<DataRecord>): {
    data: DataRecord[];
};
export declare function selectMaxX(args: TransformArg<DataRecord>): {
    data: DataRecord[];
};
export declare function selectMinY(args: TransformArg<DataRecord>): {
    data: DataRecord[];
};
export declare function selectMaxY(args: TransformArg<DataRecord>): {
    data: DataRecord[];
};
export {};
