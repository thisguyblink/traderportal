import { isDate } from './typeChecks';
const DATE_TIME = {
    hour: 'numeric',
    minute: 'numeric',
    month: 'short',
    day: 'numeric'
};
const autoFormatDateTime = (locale) => {
    const format = new Intl.DateTimeFormat(locale, DATE_TIME).format;
    return (date) => format(date).replace(', ', '\n');
};
const DAY_MONTH = {
    month: 'short',
    day: 'numeric'
};
const autoFormatDayMonth = (locale) => {
    const format = new Intl.DateTimeFormat(locale, DAY_MONTH).format;
    return (date) => format(date).replace(' ', '\n');
};
const MONTH_YEAR = {
    month: 'short',
    year: 'numeric'
};
const autoFormatMonthYear = (locale) => {
    const format = new Intl.DateTimeFormat(locale, MONTH_YEAR).format;
    return (date) => format(date).replace(' ', '\n');
};
export default function autoTimeFormat(x, plotWidth, plotLocale) {
    const daysPer100Px = ((toNumber(x.domain[1]) - toNumber(x.domain[0])) / plotWidth / 864e5) * 100;
    const format = daysPer100Px < 1
        ? autoFormatDateTime(plotLocale)
        : daysPer100Px < 30
            ? autoFormatDayMonth(plotLocale)
            : autoFormatMonthYear(plotLocale);
    return (date) => format(date).split('\n');
}
function toNumber(d) {
    return isDate(d) ? d.getTime() : +d;
}
