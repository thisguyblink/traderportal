import type { ChannelName, Channels, DataRecord, DataRow, RawValue } from '../types.js';
type ReducerFunc = (group: Iterable<DataRow>) => RawValue;
type ReducerOption = ReducerName | ReducerFunc;
type Digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
export type ReducerPercentile = (`p${Digit}${Digit}` & Record<never, never>) | 'p25' | 'p50' | 'p75';
export type ReducerName = 'count' | 'deviation' | 'difference' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'mode' | 'ratio' | 'sum' | 'variance' | ReducerPercentile;
export declare const Reducer: Record<ReducerName, ReducerFunc>;
export declare function mayberReducer(r: ReducerOption): ReducerFunc;
export declare function reduceOutputs(newDatum: DataRecord, data: DataRecord[], options: Record<ChannelName, ReducerOption>, outputs: Iterable<ChannelName>, channels: Channels, newChannels: Channels): void;
export {};
