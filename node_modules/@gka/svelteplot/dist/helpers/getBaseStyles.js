import { resolveProp } from './resolve.js';
/**
 * all style props that can be applied via channels but
 * are not scaled
 */
const styleProps = {
    strokeWidth: 'stroke-width',
    strokeDasharray: 'stroke-dasharray',
    strokeLinejoin: 'stroke-linejoin',
    strokeLinecap: 'stroke-linecap',
    blend: 'mix-blend-mode',
    clipPath: 'clip-path',
    mask: 'mask',
    fontSize: 'font-size',
    fontWeight: 'font-weight',
    fontStyle: 'font-style',
    textAnchor: 'text-anchor',
    cursor: 'cursor',
    pointerEvents: 'pointer-events'
};
const styleDefaults = {
    fontWeight: 'normal'
};
export function getBaseStylesObject(datum, props) {
    return Object.fromEntries(Object.entries(styleProps)
        .filter(([key, cssKey]) => cssKey && props[key] != null)
        .map(([key, cssKey]) => [
        cssKey,
        maybeToPixel(cssKey, resolveProp(props[key], datum, styleDefaults[key] || null))
    ]));
}
export default function (datum, props) {
    return Object.entries(getBaseStylesObject(datum, props))
        .map(([key, value]) => `${key}: ${value}`)
        .join(';');
}
export function maybeToPixel(cssKey, value) {
    if (cssKey === 'font-size' || cssKey === 'stroke-width') {
        return typeof value === 'number' ? `${value}px` : value;
    }
    return value;
}
