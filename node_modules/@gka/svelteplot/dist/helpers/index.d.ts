import type { ChannelAccessor, ChannelName, DataRecord, RawValue } from '../types.js';
import type { Snippet } from 'svelte';
/**
 * Returns first argument that is not null or undefined
 */
export declare function coalesce(...args: (RawValue | undefined | null)[]): RawValue | null;
export declare function testFilter(datum: DataRecord, options: Record<ChannelName, ChannelAccessor>): string | number | boolean | Date | null;
export declare function randomId(): string;
export declare function isSnippet(value: unknown): value is Snippet;
export declare function isValid(value: RawValue | undefined): value is number | Date | string;
export declare function maybeData(data: DataRecord[]): DataRecord[];
export declare function isObject(option: object | RawValue): option is object;
export declare function maybeNumber(value: RawValue | null): number | null;
export declare const constant: <T>(x: T) => () => T;
export declare const POSITION_CHANNELS: Set<ChannelName>;
export declare function parseInset(inset: number | string, width: number): number;
export declare function omit<T extends {}, K extends keyof T>(obj: T, ...keys: K[]): Omit<T, K>;
export declare function identity<T>(x: T): T;
